// Typography mixins create a standardized type hierarchy
//
// $isResponsive: boolean that re-renders text different sizes
// at different media queries

@mixin type-body($size, $isResponsive: false) {
  font-family: $font-family-default;
  font-weight: $font-weight-light;
  font-size: map-get($map: $type-sizes, $key: 'body-#{$size}');
  line-height: map-get($map: $type-line-heights, $key: 'body-#{$size}');

  @if ($isResponsive) {
    @include below-breakpoint($breakpoint-sm) {
      @if ($size - 10) > 0 {
        font-size: map-get($map: $type-sizes, $key: 'body-#{($size - 10)}');
        line-height: map-get($map: $type-line-heights, $key: 'body-#{($size - 10)}');
      }
    }

    @include below-breakpoint($breakpoint-xs) {
      @if ($size - 20) > 0 {
        font-size: map-get($map: $type-sizes, $key: 'body-#{($size - 20)}');
        line-height: map-get($map: $type-line-heights, $key: 'body-#{($size - 20)}');
      }
    }
  }
}

@mixin type-title($size, $isResponsive: false) {
  font-family: $font-family-default;
  font-weight: $font-weight-medium;
  font-size: map-get($map: $type-sizes, $key: 'title-#{$size}');
  line-height: map-get($map: $type-line-heights, $key: 'title-#{$size}');

  @if ($isResponsive) {
    @include below-breakpoint($breakpoint-sm) {
      @if ($size - 10) > 0 {
        font-size: map-get($map: $type-sizes, $key: 'title-#{($size - 10)}');
        line-height: map-get($map: $type-line-heights, $key: 'title-#{($size - 10)}');
      }
    }

    @include below-breakpoint($breakpoint-xs) {
      @if ($size - 20) > 0 {
        font-size: map-get($map: $type-sizes, $key: 'title-#{($size - 20)}');
        line-height: map-get($map: $type-line-heights, $key: 'title-#{($size - 20)}');
      }
    }
  }
}

@mixin type-component($size, $isResponsive: false) {
  font-family: $font-family-default;
  font-weight: $font-weight-regular;
  font-size: map-get($map: $type-sizes, $key: 'component-#{$size}');
  line-height: map-get($map: $type-line-heights, $key: 'component-#{$size}');
}
